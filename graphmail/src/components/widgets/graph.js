import React, { Component } from 'react';
import Chart from 'react-apexcharts';

export default class Graph extends Component {
    constructor(props){
        super(props);
        this.componentDidUpdate = this.componentDidUpdate.bind(this);
        this.componentDidMount = this.componentDidMount.bind(this);
        this.getDerivedStateFromProps = this.getDerivedStateFromProps.bind(this);
    }
    state = {
        options: {},
        series:[],
        type: this.props.type,
        height: this.props.height,
        width: this.props.width
    }

    componentDidMount() {
        var xname, yname;
        this.props.headings.forEach((item) =>{
            if (this.props.xHeadingKey == item.id){
                xname = item.name;
            }
            if (this.props.yHeadingKey == item.id){
                yname = item.name;
            }
        });
        var x_data = [];
        var y_data = [];
        this.props.excelJson.forEach((item) =>{ 
            x_data.push(eval(`item.${xname}`));
            y_data.push(eval(`item.${yname}`));
        });

        var xdata =  [
            {
                name: xname,
                data: x_data
            }
        ];
        var options = {
            xaxis:{
                categories: y_data
            }
        }
        this.setState({series: xdata, options});
    }

    static getDerivedStateFromProps(props, state){
        var xname, yname;
        props.headings.forEach((item) =>{
            if (props.xHeadingKey == item.id){
                xname = item.name;
            }
            if (props.yHeadingKey == item.id){
                yname = item.name;
            }
        });
        var x_data = [];
        var y_data = [];
        props.excelJson.forEach((item) =>{ 
            x_data.push(eval(`item.${xname}`));
            y_data.push(eval(`item.${yname}`));
        });

        this.setState({type: props.type});
    }

    componentDidUpdate(prevprops, prevstate){
        return;
        var xname, yname;
        this.props.headings.forEach((item) =>{
            if (this.props.xHeadingKey == item.id){
                xname = item.name;
            }
            if (this.props.yHeadingKey == item.id){
                yname = item.name;
            }
        });
        var x_data = [];
        var y_data = [];
        this.props.excelJson.forEach((item) =>{ 
            x_data.push(eval(`item.${xname}`));
            y_data.push(eval(`item.${yname}`));
        });

        if (this.props.type !== prevprops.type){
            this.setState({type: this.props.type});
            console.log(prevstate.type, this.state.type);
        }


    }



    render(){
        const titlestyle = {
            fontSize: "18px",
            fontWeight: "bold",
            fontFamily: "Arial",
            color: "#000",
            margin: 20,
            align: "center"
        };
        return (
            <div className="text-center">
                <p style={titlestyle}>{this.props.title}</p>
                <Chart options = {this.state.options}
                series = {this.state.series}
                type={this.state.type}
                width={this.state.width}
                height={this.state.height}/>
                <p>This graph was generated by <a href="https://apexcharts.com/" target="_blank">ApexCharts</a></p>
            </div>
                
        );
    }
}

